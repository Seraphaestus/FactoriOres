buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true 
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.1'
group = 'seraphaestus.factoriores'
archivesBaseName = 'factoriores'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // target Java 8, which is what Mojang ships to end users

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20210502-mixed-1.16.5' //using these mappings to fix Create dependency
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    runs {
        client {
            workingDirectory project.file('run')
            jvmArgs "-Dmixin.env.disableRefMap=true" //fix Create mixin bug
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                factoriores {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            jvmArgs "-Dmixin.env.disableRefMap=true" //fix Create mixin bug
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                factoriores {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            jvmArgs "-Dmixin.env.disableRefMap=true" //fix Create mixin bug
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'factoriores', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                factoriores {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		url "https://www.cursemaven.com"
	}
	maven { // The One Probe
        url "https://maven.tterrag.com/"
    }
    maven { // JEI
        url 'https://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'
	
	compileOnly fg.deobf("curse.maven:create-328085:3278516")
	
    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.1.3-21:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.1.3-21")
    
    compileOnly fg.deobf("mezz.jei:jei-1.16.5:7.6.1.75:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.6.1.75")
    
    runtimeOnly fg.deobf("curse.maven:immersive-engineering-231951:3102280")
    runtimeOnly fg.deobf("curse.maven:immersive-petroleum-268250:3137386")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "factoriores",
            "Specification-Vendor": "Seraphaestus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Seraphaestus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
